<source>
  @type tail
  path     /var/log/nginx/*.json
  pos_file /var/log/fluent-nginx-json.pos
  <parse>
    @type json
  </parse>
  tag nginx-access-json
  @label @NGINX_LOG
</source>
<label @NGINX_LOG>
  <match nginx-access*.**>
   
    @type copy
    <store>
      @type elasticsearch
      scheme https
      ssl_verify false
      host elk.nginx.rocks
      port 9200
      user elastic
      password sfghgs45yfsh7xfnhp9
      logstash_format true
      logstash_prefix nginx-access
    <buffer tag>
      flush_mode immediate
    </buffer>
   </store>
   <store>
    @type stdout
   </store>
  </match>
</label>


<source>
  @type tail
  path     /var/log/app_protect/app_protect.log
  pos_file /var/log/fluent-nginx-nap.pos
  <parse>
    @type none
    message_key message
  </parse>
  tag nginx-app-protect
  @label @NGINX_APP_PROTECT
</source>
<label @NGINX_APP_PROTECT>
  <filter nginx-app-protect.**>
    @type parser
    key_name message
    reserve_data true
    <parse>
      @type grok
      grok_failure_key grokfailure
      <grok>
      pattern attack_type="%{DATA:attack_type}",blocking_exception_reason="%{DATA:blocking_exception_reason}",date_time="%{DATA:date_time}",dest_port="%{DATA:dest_port}",ip_client="%{DATA:ip_client}",is_truncated="%{DATA:is_truncated}",method="%{DATA:method}",policy_name="%{DATA:policy_name}",protocol="%{DATA:protocol}",request_status="%{DATA:request_status}",response_code="%{DATA:response_code}",severity="%{DATA:severity}",sig_cves="%{DATA:sig_cves}",sig_ids="%{DATA:sig_ids}",sig_names="%{DATA:sig_names}",sig_set_names="%{DATA:sig_set_names}",src_port="%{DATA:src_port}",sub_violations="%{DATA:sub_violations}",support_id="%{DATA:support_id}",threat_campaign_names="%{DATA:threat_campaign_names}",unit_hostname="%{DATA:unit_hostname}",uri="%{DATA:uri}",violation_rating="%{DATA:violation_rating}",vs_name="%{DATA:vs_name}",x_forwarded_for_header_value="%{DATA:x_forwarded_for_header_value}",outcome="%{DATA:outcome}",outcome_reason="%{DATA:outcome_reason}",violations="%{DATA:violations}",violation_details="%{DATA:violation_details}",bot_signature_name="%{DATA:bot_signature_name}",bot_category="%{DATA:bot_category}",bot_anomalies="%{DATA:bot_anomalies}",enforced_bot_anomalies="%{DATA:enforced_bot_anomalies}",client_class="%{DATA:client_class}",request="%{DATA:request}"
      </grok>
    </parse>
  </filter>
  <filter nginx-app-protect.**>
    @type record_transformer
    enable_ruby
    <record>
      attack_type ${record["attack_type"].split(',')}
    </record>
    <record>
      sig_cves ${record["sig_cves"].split(',')}
    </record>
    <record>
      sig_ids ${record["sig_ids"].split(',')}
    </record>
    <record>
      sig_names ${record["sig_names"].split(',')}
    </record>
    <record>
      sig_set_names ${record["sig_set_names"].split(',')}
    </record>
    <record>
      threat_campaign_names ${record["threat_campaign_names"].split(',')}
    </record>
    <record>
      violations ${record["violations"].split(',')}
    </record>
    <record>
      sub_violations ${record["sub_violations"].split(',')}
    </record>
  </filter>
  <filter nginx-app-protect.**>
    @type record_transformer
    enable_ruby
    <record>
      source_host ${if record["x_forwarded_for_header_value"]!="N/A";record["x_forwarded_for_header_value"];else;record["ip_client"];end;}
    </record>
  </filter>
  <filter nginx-app-protect.**>
    @type geoip
    geoip_lookup_keys source_host
    backend_library geoip2_c
    <record>
      geoip.city_name       ${city.names.en["source_host"]}
      geoip.latitude        ${location.latitude["source_host"]}
      geoip.longitude       ${location.longitude["source_host"]}
      geoip.country_code3   ${country.iso_code["source_host"]}
      geoip.country_name    ${country.names.en["source_host"]}
      geoip.postal_code     ${postal.code["source_host"]}
      geoip.region_code     ${subdivisions.0.iso_code["source_host"]}
      geoip.region_name     ${subdivisions.0.names.en["source_host"]}
    </record>
  </filter>
  <match nginx-app-protect.**>
    @type copy
    <store>
      @type elasticsearch
      <buffer>
        flush_mode immediate
      </buffer>
      scheme https
      ssl_verify false
      host elk.nginx.rocks
      port 9200
      user elastic
      password sfghgs45yfsh7xfnhp9
      max_retry_get_es_version 3
      max_retry_putting_template 3
      reconnect_on_error true
      reload_on_failure true
      reload_connections false
      logstash_format true
      logstash_prefix waf-logs
    </store>
    <store>
    @type stdout
    </store>
  </match>
</label>
<label @FLUENT_LOG>
  <match fluent.*>
    @type stdout
  </match>
</label>